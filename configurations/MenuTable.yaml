Resources:
  MenuTable:
    Type: AWS::DynamoDB::Table
    Properties:
      "AttributeDefinitions":
        - "AttributeName": "itemId"
          "AttributeType": "S"
      "KeySchema":
        - "AttributeName": "itemId"
          "KeyType": "HASH"
      BillingMode: PAY_PER_REQUEST
      TableName: "Menu"
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"
  InitFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const response = require('./cfn-response');
          const docClient = new AWS.DynamoDB.DocumentClient();
          exports.handler = function(event, context) {
            console.log(JSON.stringify(event,null,2));
            var params = {
              RequestItems: {
                "Menu": [
                  {
                    PutRequest: {
                      Item: {
                        itemId: "ljn643" ,
                        name: "Margherita Pizza" ,
                        description: "Pizza with a delicious classic taste." ,
                        category: "PIZZA" ,
                        cost: 7.5 ,
                        ingredients: ["CRUST", "RED_SAUCE", "CHEESE"]
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        itemId: "ibr930" ,
                        name: "Hawaiian Pizza" ,
                        description: "Sweet and meaty!" ,
                        category: "PIZZA" ,
                        cost: 8.5 ,
                        ingredients: ["CRUST", "RED_SAUCE", "CHEESE", "HAM", "PINEAPPLE"]
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        itemId: "obj123" ,
                        name: "Pepperoni Pizza" ,
                        description: "Spicy classic taste!" ,
                        category: "PIZZA" ,
                        cost: 9.5 ,
                        ingredients: ["CRUST", "RED_SAUCE", "CHEESE", "PEPPERONI"]
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        itemId: "uge450" ,
                        name: "Veggie Pizza" ,
                        description: "Mushrooms, onions, bell peppers with white sauce." ,
                        category: "PIZZA" ,
                        cost: 7.5 ,
                        ingredients: ["CRUST", "WHITE_SAUCE", "CHEESE", "MUSHROOM", "ONION", "BELL_PEPPER"]
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        itemId: "ols285" ,
                        name: "BBQ Chicken Pizza" ,
                        description: "What can be better than BBQ sauce and chicken?" ,
                        category: "PIZZA" ,
                        cost: 8 ,
                        ingredients: ["CRUST", "BBQ_SAUCE", "CHEESE", "CHICKEN", "ONION", "BACON"]
                      }
                    }
                  }
                ]
              }
            };
            docClient.batchWrite(params, function(err, data) {
              if (err) {
                response.send(event, context, "FAILED", {});
              } else {
                response.send(event, context, "SUCCESS", {});
              }
            });
          };
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      # 2020-02-27: [bp] updated from nodejs10.x in case it matters
      Runtime: nodejs12.x
      Timeout: 60
  InitializeEventsTable:
    Type: Custom::InitFunction
    DependsOn: MenuTable
    Properties:
      ServiceToken:
        Fn::GetAtt: [ InitFunction , "Arn" ]
      DynamoTableName:
        Ref: MenuTable
